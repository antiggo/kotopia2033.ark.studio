// Parallax scroll handler
var parallaxImages = [];
var ticking = false;

function updateParallax() {
    var scrollY = window.pageYOffset || document.documentElement.scrollTop;
    
    parallaxImages.forEach(function(item) {
        var speed = item.speed;
        var offset = scrollY * speed;
        item.element.style.setProperty('--parallax-y', offset + 'px');
    });
    
    ticking = false;
}

function requestParallaxUpdate() {
    if (!ticking) {
        window.requestAnimationFrame(updateParallax);
        ticking = true;
    }
}

window.addEventListener('scroll', requestParallaxUpdate, { passive: true });

// Add water to parallax on load
window.addEventListener('DOMContentLoaded', function() {
    var water = document.querySelector('.Map__water');
    if (water) {
        water.style.setProperty('--parallax-y', '0px');
        parallaxImages.push({
            element: water,
            speed: 0.007 // Very subtle parallax for background
        });
    }
});

Beast.decl({
    Image: {
        expand: function () {
            this.empty()
            this.css({
                backgroundImage: 'url('+ this.text() +')',
                width: this.param('width'),
                height: this.param('height'),
            })
            if (MissEvent.mobile) {
                
            } else {
                  
            }
        },
        domInit: function() {
            var self = this;
            var imageElements = document.querySelectorAll('.Image');
            var index = Array.from(imageElements).indexOf(this.domNode());
            
            // Different parallax speeds for each image
            var speeds = [0.05, -0.03, 0.08, -0.04, 0.06, -0.05, 0.04, -0.06];
            var speed = speeds[index % speeds.length];
            
            // Different float parameters for each image
            var floatConfigs = [
                { x: 0, y: 0.8, rot: 0.5, duration: 6, delay: -0.7 },
                { x: 0.4, y: 0.5, rot: 0.6, duration: 7.5, delay: -1.1 },
                { x: 0, y: 1, rot: -0.4, duration: 5.5, delay: -0.9 },
                { x: -0.5, y: 0.7, rot: 0.8, duration: 8, delay: -1.5 },
                { x: 0.2, y: 0.9, rot: 1, duration: 6.8, delay: -0.3 },
                { x: -0.3, y: 0.4, rot: -0.9, duration: 7.2, delay: -2 },
                { x: 0.3, y: 0.6, rot: 0.3, duration: 6.3, delay: -1.8 },
                { x: -0.2, y: 0.85, rot: -0.5, duration: 7.8, delay: -0.5 }
            ];
            var config = floatConfigs[index % floatConfigs.length];
            
            this.domNode().style.setProperty('--float-x-amplitude', config.x + 'vw');
            this.domNode().style.setProperty('--float-y-amplitude', config.y + 'vw');
            this.domNode().style.setProperty('--float-rot-amplitude', config.rot + 'deg');
            this.domNode().style.setProperty('--float-duration', config.duration + 's');
            this.domNode().style.setProperty('--float-delay', config.delay + 's');
            
            parallaxImages.push({
                element: this.domNode(),
                speed: speed
            });
        },
        
    },
    
})




Beast.decl({
    Text: {
        expand: function () {
            this.domAttr('src', this.param('src'))
            if (MissEvent.mobile) {
                this.css({
                    width: this.parentBlock().param('mobilewidth'),
                })
            } else {
                this.css({
                    width: this.parentBlock().param('width'),
                })    
            }
            this.css({
                marginLeft: this.parentBlock().param('left'),
                marginTop: this.parentBlock().param('top'),
            })
        }
    },
    
    
})


Beast.decl({
    Card: {
        expand: function () {
            this.domAttr('src', this.param('src'))
            this.css({
                width: this.parentBlock().param('width'),
                marginLeft: this.parentBlock().param('left'),
                marginTop: this.parentBlock().param('top'),
            })
        }
    },    
})



